beanData: '{"ionBean":"Menu","MenuType":"plain:push"}'
comment: A menu with all pages added automatically
tagName: ion-menu
↓Header [ngx.components.UIDynamicElement-1500890727582]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1500890731485]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓BarTitle [ngx.components.UIDynamicElement-1500890752959]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Text [ngx.components.UIText-1500890755422]: 
        isEnabled: false
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:Energy Management
↓Content [ngx.components.UIDynamicElement-1500890742326]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓MenuItem [ngx.components.UIDynamicMenuItem-1676385819326]: 
    beanData: '{"ionBean":"MenuItem"}'
    isEnabled: false
    itemicon: bar-chart
    itempage: poc_energisme.Application.NgxApp.Multisite
    tagName: ion-menu-toggle
  ↓List [ngx.components.UIDynamicElement-1501343197007]: 
    beanData: '{"ionBean":"List","Inset":"plain:inset"}'
    isEnabled: false
    tagName: ion-list
    ↓MenuAutoItems [ngx.components.UIDynamicMenuItems-1500890605250]: 
      beanData: '{"ionBean":"MenuAutoItems"}'
      isEnabled: false
      itemtitle: 
      tagName: button
    ↓MenuItem [ngx.components.UIDynamicMenuItem-1671789214646]: 
      beanData: '{"ionBean":"MenuItem"}'
      itempage: poc_energisme.Application.NgxApp.Multisite
      itemtitle: '''Multisite'''
      tagName: ion-menu-toggle
    ↓MenuItem1 [ngx.components.UIDynamicMenuItem-1671789227907]: 
      beanData: '{"ionBean":"MenuItem"}'
      itempage: poc_energisme.Application.NgxApp.Monosite
      itemtitle: '''Monosite'''
      tagName: ion-menu-toggle
    ↓Directive [ngx.components.UIControlDirective-1671790467693]: 
      directiveName: If
      directiveSource: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:this.global['isAdmin'] != undefined && this.global['isAdmin'] == 'true'
      ↓MenuItem [ngx.components.UIDynamicMenuItem-1671790508996]: 
        beanData: '{"ionBean":"MenuItem"}'
        itempage: poc_energisme.Application.NgxApp.Adminstration
        itemtitle: '''Paramètres'''
        tagName: ion-menu-toggle
  ↓Multisite [ngx.components.UIDynamicElement-1676387510037]: 
    beanData: '{"ionBean":"GenericItem"}'
    tagName: ion-item
    ↓Icon [ngx.components.UIDynamicElement-1676387523225]: 
      beanData: |
        '{
         "ionBean": "Icon",
         "IconName": "plain:stats-chart-outline",
         "IonSize": "plain:large"
        }'
      tagName: ion-icon
    ↓Style [ngx.components.UIStyle-1676387647922]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '/**
               * Custom properties (sometimes referred to as CSS variables or cascading variables)
               * are entities defined by CSS authors that contain specific values to be reused throughout a document.
               * They are set using custom property notation, e.g.: --main-color: black;
               * and are accessed using the var() function, e.g.: color: var(--main-color);
               * You can find below your component''s properties you can customize within the page.
               * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
               * For more informations see https://ionicframework.com/docs/theming.
              **/
              //--background	//Background of the item
              //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
              //--background-activated-opacity	//Opacity of the item background when pressed
              //--background-focused	//Background of the item when focused with the tab key
              //--background-focused-opacity	//Opacity of the item background when focused with the tab key
              //--background-hover	//Background of the item on hover
              //--background-hover-opacity	//Opacity of the background of the item on hover
              //--border-color	//Color of the item border
              //--border-radius	//Radius of the item border
              //--border-style	//Style of the item border
              //--border-width	//Width of the item border
              //--color	//Color of the item
              //--color-activated	//Color of the item when pressed
              //--color-focused	//Color of the item when focused with the tab key
              //--color-hover	//Color of the item on hover
              //--detail-icon-color	//Color of the item detail icon
              //--detail-icon-font-size	//Font size of the item detail icon
              //--detail-icon-opacity	//Opacity of the item detail icon
              //--highlight-color-focused	//The color of the highlight on the item when focused
              //--highlight-color-invalid	//The color of the highlight on the item when invalid
              //--highlight-color-valid	//The color of the highlight on the item when valid
              //--highlight-height	//The height of the highlight on the item
              //--inner-border-width	//Width of the item inner border
              //--inner-box-shadow	//Box shadow of the item inner
              //--inner-padding-bottom	//Bottom padding of the item inner
              //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
              //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
              //--inner-padding-top	//Top padding of the item inner
              //--min-height	//Minimum height of the item
              //--padding-bottom	//Bottom padding of the item
              //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
              //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
              //--padding-top	//Top padding of the item
              //--ripple-color	//Color of the item ripple effect
              //--transition	//Transition of the item
              --background: transparent;
              --border-color: transparent;
              	ion-icon {
              		color: white !important;
              	}
              '
    ↓Event [ngx.components.UIControlEvent-1676387912231]: 
      ↓RootPage [ngx.components.UIDynamicAction-1676387923032]: 
        beanData: '{"ionBean":"RootPageAction","page":"plain:poc_energisme.Application.NgxApp.Multisite"}'
    ↓Tooltips [ngx.components.UIDynamicAttr-1676387987458]: 
      beanData: |
        '{
         "ionBean": "Tooltips",
         "Placement": "plain:right",
         "Tooltip": "plain:Multisite"
        }'
      selfClose: false
  ↓Grid [ngx.components.UIDynamicElement-1676462641519]: 
    beanData: '{"ionBean":"Grid"}'
    isEnabled: false
    tagName: ion-grid
    ↓GridRow [ngx.components.UIDynamicElement-1676462641506]: 
      beanData: |
        '{
         "ionBean": "GridRow",
         "Height": "plain",
         "FlexAlignement": "plain:ion-align-items-center"
        }'
      tagName: ion-row
      ↓GridCol [ngx.components.UIDynamicElement-1676462641508]: 
        beanData: '{"ionBean":"GridCol","FlexAlignement":"plain:ion-align-self-center"}'
        tagName: ion-col
  ↓Monosite [ngx.components.UIDynamicElement-1676388107576]: 
    beanData: '{"ionBean":"GenericItem"}'
    tagName: ion-item
    ↓Icon [ngx.components.UIDynamicElement-1676388107579]: 
      beanData: |
        '{
         "ionBean": "Icon",
         "IconName": "plain:bar-chart",
         "IonSize": "plain:large"
        }'
      tagName: ion-icon
    ↓Style [ngx.components.UIStyle-1676388107582]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '/**
               * Custom properties (sometimes referred to as CSS variables or cascading variables)
               * are entities defined by CSS authors that contain specific values to be reused throughout a document.
               * They are set using custom property notation, e.g.: --main-color: black;
               * and are accessed using the var() function, e.g.: color: var(--main-color);
               * You can find below your component''s properties you can customize within the page.
               * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
               * For more informations see https://ionicframework.com/docs/theming.
              **/
              //--background	//Background of the item
              //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
              //--background-activated-opacity	//Opacity of the item background when pressed
              //--background-focused	//Background of the item when focused with the tab key
              //--background-focused-opacity	//Opacity of the item background when focused with the tab key
              //--background-hover	//Background of the item on hover
              //--background-hover-opacity	//Opacity of the background of the item on hover
              //--border-color	//Color of the item border
              //--border-radius	//Radius of the item border
              //--border-style	//Style of the item border
              //--border-width	//Width of the item border
              //--color	//Color of the item
              //--color-activated	//Color of the item when pressed
              //--color-focused	//Color of the item when focused with the tab key
              //--color-hover	//Color of the item on hover
              //--detail-icon-color	//Color of the item detail icon
              //--detail-icon-font-size	//Font size of the item detail icon
              //--detail-icon-opacity	//Opacity of the item detail icon
              //--highlight-color-focused	//The color of the highlight on the item when focused
              //--highlight-color-invalid	//The color of the highlight on the item when invalid
              //--highlight-color-valid	//The color of the highlight on the item when valid
              //--highlight-height	//The height of the highlight on the item
              //--inner-border-width	//Width of the item inner border
              //--inner-box-shadow	//Box shadow of the item inner
              //--inner-padding-bottom	//Bottom padding of the item inner
              //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
              //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
              //--inner-padding-top	//Top padding of the item inner
              //--min-height	//Minimum height of the item
              //--padding-bottom	//Bottom padding of the item
              //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
              //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
              //--padding-top	//Top padding of the item
              //--ripple-color	//Color of the item ripple effect
              //--transition	//Transition of the item
              --background: transparent;
              --border-color: transparent;
              	ion-icon {
              		color: white !important;
              	}
              '
    ↓Event [ngx.components.UIControlEvent-1676388107585]: 
      ↓RootPage [ngx.components.UIDynamicAction-1676388107588]: 
        beanData: '{"ionBean":"RootPageAction","page":"plain:poc_energisme.Application.NgxApp.Monosite"}'
    ↓Tooltips [ngx.components.UIDynamicAttr-1676388107591]: 
      beanData: |
        '{
         "ionBean": "Tooltips",
         "Placement": "plain:right",
         "Tooltip": "plain:Monosite"
        }'
      selfClose: false
  ↓Parametres [ngx.components.UIDynamicElement-1676388740370]: 
    beanData: '{"ionBean":"GenericItem"}'
    tagName: ion-item
    ↓Icon [ngx.components.UIDynamicElement-1676388740373]: 
      beanData: |
        '{
         "ionBean": "Icon",
         "IconName": "plain:settings-outline",
         "IonSize": "plain:large"
        }'
      tagName: ion-icon
    ↓Style [ngx.components.UIStyle-1676388740376]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '/**
               * Custom properties (sometimes referred to as CSS variables or cascading variables)
               * are entities defined by CSS authors that contain specific values to be reused throughout a document.
               * They are set using custom property notation, e.g.: --main-color: black;
               * and are accessed using the var() function, e.g.: color: var(--main-color);
               * You can find below your component''s properties you can customize within the page.
               * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
               * For more informations see https://ionicframework.com/docs/theming.
              **/
              //--background	//Background of the item
              //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
              //--background-activated-opacity	//Opacity of the item background when pressed
              //--background-focused	//Background of the item when focused with the tab key
              //--background-focused-opacity	//Opacity of the item background when focused with the tab key
              //--background-hover	//Background of the item on hover
              //--background-hover-opacity	//Opacity of the background of the item on hover
              //--border-color	//Color of the item border
              //--border-radius	//Radius of the item border
              //--border-style	//Style of the item border
              //--border-width	//Width of the item border
              //--color	//Color of the item
              //--color-activated	//Color of the item when pressed
              //--color-focused	//Color of the item when focused with the tab key
              //--color-hover	//Color of the item on hover
              //--detail-icon-color	//Color of the item detail icon
              //--detail-icon-font-size	//Font size of the item detail icon
              //--detail-icon-opacity	//Opacity of the item detail icon
              //--highlight-color-focused	//The color of the highlight on the item when focused
              //--highlight-color-invalid	//The color of the highlight on the item when invalid
              //--highlight-color-valid	//The color of the highlight on the item when valid
              //--highlight-height	//The height of the highlight on the item
              //--inner-border-width	//Width of the item inner border
              //--inner-box-shadow	//Box shadow of the item inner
              //--inner-padding-bottom	//Bottom padding of the item inner
              //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
              //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
              //--inner-padding-top	//Top padding of the item inner
              //--min-height	//Minimum height of the item
              //--padding-bottom	//Bottom padding of the item
              //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
              //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
              //--padding-top	//Top padding of the item
              //--ripple-color	//Color of the item ripple effect
              //--transition	//Transition of the item
              --background: transparent;
              --border-color: transparent;
              	ion-icon {
              		color: white !important;
              	}
              '
    ↓Event [ngx.components.UIControlEvent-1676388740379]: 
      ↓RootPage [ngx.components.UIDynamicAction-1676388740382]: 
        beanData: '{"ionBean":"RootPageAction","page":"plain:poc_energisme.Application.NgxApp.Adminstration"}'
    ↓Tooltips [ngx.components.UIDynamicAttr-1676388740385]: 
      beanData: |
        '{
         "ionBean": "Tooltips",
         "Placement": "plain:right",
         "Tooltip": "plain:Administration"
        }'
      selfClose: false