scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	public showDatePicker = false;
        	public date = [];
        	public selectAggregation = ''month'';
        	public showSpinner = "false";
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        //		console.log("changeeees")
        //		console.log(changes)
        		if(changes[''sequenceParams''].firstChange == false) {
        			
        		
        		setTimeout( () => {
        			Object.keys(changes).forEach( (key) => {
        			switch(key) {
        				case "sequenceParams": {
        					if(changes[key].previousValue != undefined) {
        						
        						var date_start;
        						var date_end;
        						var agg_function;
        						// case its first time we select a group with sites, calculate the good range date for depending on the widget type
        						if(changes[key].previousValue[''date_start''] == undefined) {
        							if(this.sequenceToCall == ".widget_conso_total") {
        								date_start = this.getLastTwoYears()[''date_start''];
        								date_end = this.getLastTwoYears()[''date_end'']
        								// changes[key].currentValue[''date_start''] = this.getLastYear()[''date_start'']
        								// changes[key].currentValue[''date_end''] = this.getLastYear()[''date_end'']
        								console.log(changes[key].currentValue)
        							} else if (this.isGauge == "true") {
        								date_start = this.getLastTwoMonths()[''date_start'']
        								date_end = this.getLastTwoMonths()[''date_end'']
        								// changes[key].currentValue[''date_start''] = this.getLastTwoYears()[''date_start'']
        								// changes[key].currentValue[''date_end''] = this.getLastTwoYears()[''date_end'']
        							} else if(this.sequenceToCall == ".widget_conso" && this.isGauge == "false" || this.sequenceToCall == ''.widget_conso_monosite_gaz_dju'') {
        								date_start = this.getLastYear()[''date_start'']
        								date_end = this.getLastYear()[''date_end'']
        							} else if(this.sequenceToCall == ''.widget_multisite_sites_energivore'') {
        								date_start = this.getLastYear()[''date_start'']
        								date_end = this.getLastYear()[''date_end'']
        							} else if(this.isHeatmap == "true") {
        								date_start = "2021-01-01"
        								date_end = "2022-12-31"
        								// date_start = this.getLastMonth()[''date_start'']
        								// date_end = this.getLastMonth()[''date_end'']
        							} 
        							
        							
        							if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo") {
        								agg_function = "day"
        							} else if (this.sequenceToCall == ".widget_conso" && this.sequenceMarker == "consoMensuelle") {
        								agg_function = "month"
        								
        							} else {
        								agg_function = changes[key].previousValue[''agg_function'']
        							}
        							
        							
        							
        							
        						} else {
        							if(changes[key].previousValue[''date_start''].length == 0 && changes[key].previousValue[''date_end''] == 0) {
        								if(this.sequenceToCall == ".widget_conso_total") {
        									date_start = this.getLastTwoYears()[''date_start''];
        									date_end = this.getLastTwoYears()[''date_end'']
        									// changes[key].currentValue[''date_start''] = this.getLastYear()[''date_start'']
        									// changes[key].currentValue[''date_end''] = this.getLastYear()[''date_end'']
        								console.log(changes[key].currentValue)
        								} else if (this.isGauge == "true") {
        									date_start = this.getLastTwoMonths()[''date_start'']
        									date_end = this.getLastTwoMonths()[''date_end'']
        									// changes[key].currentValue[''date_start''] = this.getLastTwoYears()[''date_start'']
        									// changes[key].currentValue[''date_end''] = this.getLastTwoYears()[''date_end'']
        								} else if(this.sequenceToCall == ".widget_conso" && this.isGauge == "false" || this.sequenceToCall == ''.widget_conso_monosite_gaz_dju'') {
        									date_start = this.getLastYear()[''date_start'']
        									date_end = this.getLastYear()[''date_end'']
        								} else if(this.sequenceToCall == ''.widget_multisite_sites_energivore'') {
        									date_start = this.getLastYear()[''date_start'']
        									date_end = this.getLastYear()[''date_end'']
        								} else if(this.isHeatmap == "true") {
        									date_start = "2021-01-01"
        									date_end = "2022-12-31"
        									//date_start = this.getLastMonth()[''date_start'']
        									//date_end = this.getLastMonth()[''date_end'']
        								}
        								
        								
        								if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo") {
        									agg_function = "day"
        								} else if (this.sequenceToCall == ".widget_conso" && this.sequenceMarker == "consoMensuelle") {
        									agg_function = "month"
        									
        								} else {
        									agg_function = changes[key].previousValue[''agg_function'']
        								}
        								
        							
        								
        							} else {
        								if(changes[key].currentValue[''date_start''] != undefined && changes[key].currentValue[''date_start''].length > 0 && changes[key].currentValue[''date_end''].length > 0) {
        									date_start = changes[key].currentValue[''date_start''];
        									date_end = changes[key].currentValue[''date_end'']
        								} else {
        									date_start = changes[key].previousValue[''date_start'']
        									date_end = changes[key].previousValue[''date_end'']
        								}
        								
        								
        								if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo") {
        									agg_function = "day"
        								} else if (this.sequenceToCall == ".widget_conso" && this.sequenceMarker == "consoMensuelle") {
        									agg_function = "month"
        									
        								} else {
        									agg_function = changes[key].previousValue[''agg_function'']
        								}
        								
        								
        								
        								
        								
        							}
        							
        						}
        //						console.log("not first changes")
        //						console.log(changes[key])
        						var sequenceToCall = this.sequenceToCall + ''#'' + this.sequenceMarker
        						console.log(sequenceToCall)
        						if(changes[key].previousValue.__sequence != sequenceToCall) {
        							changes[key].currentValue[''date_start''] = date_start;
        							changes[key].currentValue[''date_end''] = date_end;
        							
        							// changes[key].currentValue[''agg_function''] = agg_function;
        						setTimeout( () => {
        							
        							this.showSpinner = "true";
        							
        							
        							if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo" || this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoMensuelle") {
        								changes[key].currentValue[''agg_function''] = agg_function
        							}
        							this.selectAggregation = changes[key].currentValue[''agg_function'']
        							this.call(sequenceToCall, changes[key].currentValue, null, 500, true).then( (resp) => {
        						    console.log(resp)
        							this.local[''response''] = resp;
        							this.showSpinner = "false";
        							
        							})
        						}, 100)
        						}
        
        
        					} else {
        						if(changes[key].currentValue != undefined && changes[key].currentValue[''date_start''] != undefined && changes[key].currentValue[''date_start''].length == 0 && changes[key].currentValue[''date_end''] != undefined && changes[key].currentValue[''date_end''].length == 0) {
        							
        							var date_start;
        							var date_end;
        							
        							if(this.sequenceToCall == ".widget_conso_total") {
        								date_start = this.getLastTwoYears()[''date_start''];
        								date_end = this.getLastTwoYears()[''date_end'']
        								// changes[key].currentValue[''date_start''] = this.getLastYear()[''date_start'']
        								// changes[key].currentValue[''date_end''] = this.getLastYear()[''date_end'']
        								console.log(changes[key].currentValue)
        							} else if (this.isGauge == "true") {
        								date_start = this.getLastTwoMonths()[''date_start'']
        								date_end = this.getLastTwoMonths()[''date_end'']
        								// changes[key].currentValue[''date_start''] = this.getLastTwoYears()[''date_start'']
        								// changes[key].currentValue[''date_end''] = this.getLastTwoYears()[''date_end'']
        							} else if(this.sequenceToCall == ".widget_conso" && this.isGauge == "false" || this.sequenceToCall == ''.widget_conso_monosite_gaz_dju'') {
        								date_start = this.getLastYear()[''date_start'']
        								date_end = this.getLastYear()[''date_end'']
        							} else if(this.sequenceToCall == ''.widget_multisite_sites_energivore'') {
        								date_start = this.getLastYear()[''date_start'']
        								date_end = this.getLastYear()[''date_end'']
        							} else if(this.isHeatmap == "true") {
        								date_start = "2021-01-01"
        								date_end = "2022-12-31"
        								//date_start = this.getLastMonth()[''date_start'']
        								//date_end = this.getLastMonth()[''date_end'']
        							}
        							
        							if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo") {
        								agg_function = "day"
        							} else if (this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoMensuelle") {
        								agg_function = "month"
        								
        							} else {
        								agg_function = changes[key].previousValue[''agg_function'']
        							}
        							
        							
        						} else {
        							date_start = changes[key].currentValue[''date_start''];
        							date_end = changes[key].currentValue[''date_end'']
        							
        							
        							if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo") {
        								agg_function = "day"
        							} else if (this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoMensuelle") {
        								agg_function = "month"
        								
        							} else {
        								agg_function = changes[key].currentValue[''agg_function'']
        							}
        							
        							
        							
        						}
        						var sequenceToCall = this.sequenceToCall + ''#'' + this.sequenceMarker
        						setTimeout( () => {
        							changes[key].currentValue[''date_start''] = date_start;
        							changes[key].currentValue[''date_end''] = date_end;
        							// changes[key].currentValue[''agg_function''] = agg_function;
        							this.showSpinner = "true";
        							 if(this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoHebdo" || this.sequenceToCall == ''.widget_conso'' && this.sequenceMarker == "consoMensuelle") {
        								changes[key].currentValue[''agg_function''] = agg_function
        							}
        							this.selectAggregation = changes[key].currentValue[''agg_function'']
        							this.call(sequenceToCall, changes[key].currentValue, null, 500, true).then( (resp) => {
        							    console.log(resp)
        								this.local[''response''] = resp;
        								this.showSpinner = "false";
        								
        							})
        						}, 100)
        						
        						
        					}
        					
        					break;
        				} // end case sequenceParams
        			} // end switch
        		}) // end object.keys
        		}, 1000)
        		} // end if current and previous != undefined
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	String(string) {
        		return new String(string)
        	}
        	
        	getLastMonth() {
        		var today = new Date();
        		var todayWeekMonth = today.getMonth() + 1;
        		var todayWeekDay = today.getDate();
        		var todayWeekYear = today.getFullYear();
        		
          		var lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
          		
          		var lastMonthMonth = lastMonth.getMonth() + 1;
        		var lastMonthDay = lastMonth.getDate();
        		var lastMonthYear = lastMonth.getFullYear();
        
        		var lastMonthDisplayPadded = ("0000" + lastMonthYear.toString()).slice(-4) + "-" + ("00" + lastMonthMonth.toString()).slice(-2) + "-" + ("00" + lastMonthDay.toString()).slice(-2);
        		var todayWeekDisplayPadded = ("0000" + todayWeekYear.toString()).slice(-4) + "-" + ("00" + todayWeekMonth.toString()).slice(-2) + "-" + ("00" + todayWeekDay.toString()).slice(-2);
        		var dates = {
        			date_start: lastMonthDisplayPadded,
        			date_end: todayWeekDisplayPadded
        		}
        		
        		return dates;
        	}
        	getLastTwoMonths() {
        		var today = new Date();
        		var todayWeekMonth = today.getMonth() + 1;
        		var todayWeekDay = today.getDate();
        		var todayWeekYear = today.getFullYear();
        		
          		var lastMonth = new Date(today.getFullYear(), today.getMonth() - 2, today.getDate());
          		
          		var lastMonthMonth = lastMonth.getMonth() + 1;
        		var lastMonthDay = lastMonth.getDate();
        		var lastMonthYear = lastMonth.getFullYear();
        
        		var lastMonthDisplayPadded = ("0000" + lastMonthYear.toString()).slice(-4) + "-" + ("00" + lastMonthMonth.toString()).slice(-2) + "-" + ("00" + lastMonthDay.toString()).slice(-2);
        		var todayWeekDisplayPadded = ("0000" + todayWeekYear.toString()).slice(-4) + "-" + ("00" + todayWeekMonth.toString()).slice(-2) + "-" + ("00" + todayWeekDay.toString()).slice(-2);
        		var dates = {
        			date_start: lastMonthDisplayPadded,
        			date_end: todayWeekDisplayPadded
        		}
        		
        		return dates;
        	}
        	
        	getLastTwoYears() {
        		var today = new Date();
        		var todayWeekMonth = today.getMonth() + 1;
        		var todayWeekDay = today.getDate();
        		var todayWeekYear = today.getFullYear();
        		
          		var lastYear = new Date(today.getFullYear() - 2, today.getMonth(), today.getDate());
          		
          		var lastYearMonth = lastYear.getMonth() + 1;
        		var lastYearDay = lastYear.getDate();
        		var lastYearYear = lastYear.getFullYear();
        
        		var lastYearDisplayPadded = ("0000" + lastYearYear.toString()).slice(-4) + "-" + ("00" + lastYearMonth.toString()).slice(-2) + "-" + ("00" + lastYearDay.toString()).slice(-2);
        		var todayWeekDisplayPadded = ("0000" + todayWeekYear.toString()).slice(-4) + "-" + ("00" + todayWeekMonth.toString()).slice(-2) + "-" + ("00" + todayWeekDay.toString()).slice(-2);
        		var dates = {
        			date_start: lastYearDisplayPadded,
        			date_end: todayWeekDisplayPadded
        		}
        		
        		return dates;
        	}
        	
        	getLastYear() {
        		var today = new Date();
        		var todayWeekMonth = today.getMonth() + 1;
        		var todayWeekDay = today.getDate();
        		var todayWeekYear = today.getFullYear();
        		
          		var lastYear = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
          		
          		var lastYearMonth = lastYear.getMonth() + 1;
        		var lastYearDay = lastYear.getDate();
        		var lastYearYear = lastYear.getFullYear();
        
        		var lastYearDisplayPadded = ("0000" + lastYearYear.toString()).slice(-4) + "-" + ("00" + lastYearMonth.toString()).slice(-2) + "-" + ("00" + lastYearDay.toString()).slice(-2);
        		var todayWeekDisplayPadded = ("0000" + todayWeekYear.toString()).slice(-4) + "-" + ("00" + todayWeekMonth.toString()).slice(-2) + "-" + ("00" + todayWeekDay.toString()).slice(-2);
        		var dates = {
        			date_start: lastYearDisplayPadded,
        			date_end: todayWeekDisplayPadded
        		}
        		
        		return dates;
        	}
        	/*End_c8o_CompFunction*/
        '
↓Grid [ngx.components.UIDynamicElement-1667815940116]: 
  beanData: '{"ionBean":"Grid"}'
  tagName: ion-grid
  ↓rowHeader [ngx.components.UIDynamicElement-1667815940118]: 
    beanData: |
      '{
       "ionBean": "GridRow",
       "Height": "plain",
       "FlexAlignement": "plain:ion-align-items-center"
      }'
    tagName: ion-row
    ↓colTitle [ngx.components.UIDynamicElement-1667815940120]: 
      beanData: '{"ionBean":"GridCol","FlexAlignement":"plain:ion-align-self-center"}'
      tagName: ion-col
      ↓Label [ngx.components.UIDynamicElement-1667815940122]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1667815940124]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.title","prefix":"","suffix":"","custom":"","useCustom":false}}
    ↓colActionButtons [ngx.components.UIDynamicElement-1667815940126]: 
      beanData: '{"ionBean":"GridCol","Size":"plain:3"}'
      tagName: ion-col
      ↓GenericItem [ngx.components.UIDynamicElement-1667816245054]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓ButtonSet [ngx.components.UIDynamicElement-1667816245056]: 
          beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
          tagName: ion-buttons
          ↓Directive [ngx.components.UIControlDirective-1669312722941]: 
            directiveExpression: this.isInModal == "false"
            directiveName: If
            ↓buttonZoomChart [ngx.components.UIDynamicElement-1667816245058]: 
              beanData: '{"ionBean":"Button"}'
              tagName: ion-button
              ↓Event [ngx.components.UIControlEvent-1667816245062]: 
                ↓ModalPage [ngx.components.UIDynamicAction-1676041287712]: 
                  beanData: |
                    '{
                     "ionBean": "ModalAction",
                     "page": "plain:poc_energisme.Application.NgxApp.zoomChart",
                     "data": "script:{\r\n\ttitle: this.title,\r\n\tsequenceToCall: this.sequenceToCall,\r\n\tsequenceParams: JSON.stringify(this.sequenceParams),\r\n\tisGoogleMap: this.isGoogleMap,\r\n\tisGauge: this.isGauge,\r\n\tisInModal: ''true'',\r\n\tisHeatmap: this.isHeatmap,\r\n\tsequenceMarker: this.sequenceMarker,\r\n\taggregation: this.aggregation,\r\n\tdisplayTotalOnly: this.displayTotalOnly\r\n}",
                     "cssClass": "plain:modal75"
                    }'
              ↓Icon [ngx.components.UIDynamicElement-1667816344210]: 
                beanData: '{"ionBean":"Icon","IconName":"source:{\"filter\":\"Icon\",\"project\":\"poc_energisme\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''expand''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
                tagName: ion-icon
          ↓Directive1 [ngx.components.UIControlDirective-1669312766015]: 
            directiveExpression: this.isInModal == "true"
            directiveName: If
            ↓buttonZoomChart [ngx.components.UIDynamicElement-1669312766018]: 
              beanData: '{"ionBean":"Button"}'
              tagName: ion-button
              ↓Event [ngx.components.UIControlEvent-1669312766021]: 
                ↓PopPage [ngx.components.UIDynamicAction-1669312799921]: 
                  beanData: '{"ionBean":"PopPageAction"}'
                  isEnabled: false
                ↓CloseModal [ngx.components.UIDynamicAction-1675938043811]: 
                  beanData: '{"ionBean":"CloseModalAction"}'
              ↓Icon [ngx.components.UIDynamicElement-1669312766027]: 
                beanData: '{"ionBean":"Icon","IconName":"source:{\"filter\":\"Icon\",\"project\":\"poc_energisme\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''close''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
                tagName: ion-icon
        ↓Style [ngx.components.UIStyle-1669287299575]: 
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--background	//Background of the item
                  //--background-activated	//Background of the item when pressed. Note: setting this will interfere with the Material Design ripple
                  //--background-activated-opacity	//Opacity of the item background when pressed
                  //--background-focused	//Background of the item when focused with the tab key
                  //--background-focused-opacity	//Opacity of the item background when focused with the tab key
                  //--background-hover	//Background of the item on hover
                  //--background-hover-opacity	//Opacity of the background of the item on hover
                  //--border-color	//Color of the item border
                  //--border-radius	//Radius of the item border
                  //--border-style	//Style of the item border
                  //--border-width	//Width of the item border
                  //--color	//Color of the item
                  //--color-activated	//Color of the item when pressed
                  //--color-focused	//Color of the item when focused with the tab key
                  //--color-hover	//Color of the item on hover
                  //--detail-icon-color	//Color of the item detail icon
                  //--detail-icon-font-size	//Font size of the item detail icon
                  //--detail-icon-opacity	//Opacity of the item detail icon
                  //--highlight-color-focused	//The color of the highlight on the item when focused
                  //--highlight-color-invalid	//The color of the highlight on the item when invalid
                  //--highlight-color-valid	//The color of the highlight on the item when valid
                  //--highlight-height	//The height of the highlight on the item
                  //--inner-border-width	//Width of the item inner border
                  //--inner-box-shadow	//Box shadow of the item inner
                  //--inner-padding-bottom	//Bottom padding of the item inner
                  //--inner-padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner
                  //--inner-padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner
                  //--inner-padding-top	//Top padding of the item inner
                  //--min-height	//Minimum height of the item
                  //--padding-bottom	//Bottom padding of the item
                  //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item
                  //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item
                  //--padding-top	//Top padding of the item
                  //--ripple-color	//Color of the item ripple effect
                  //--transition	//Transition of the item
                  
                  		--inner-padding-end: unset !important;
                  '
    ↓Style [ngx.components.UIStyle-1667818543518]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '	border-bottom: 1px solid #E3E3E3;
              '
  ↓Directive1 [ngx.components.UIControlDirective-1669045411285]: 
    directiveExpression: this.isGoogleMap == "false" && this.local['response']?.total != undefined && this.local['response']?.date != undefined
    directiveName: If
    ↓rowDate [ngx.components.UIDynamicElement-1667816527119]: 
      beanData: '{"ionBean":"GridRow","Height":"plain"}'
      tagName: ion-row
      ↓colDate [ngx.components.UIDynamicElement-1667816527121]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Label [ngx.components.UIDynamicElement-1667816527123]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Button [ngx.components.UIDynamicElement-1669373419552]: 
            beanData: '{"ionBean":"Button"}'
            tagName: ion-button
            ↓Event [ngx.components.UIControlEvent-1669373419558]: 
            ↓Icon [ngx.components.UIDynamicElement-1667816554836]: 
              beanData: '{"ionBean":"Icon","IconName":"source:{\"filter\":\"Icon\",\"project\":\"poc_energisme\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''add''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"''calendar''\",\"useCustom\":true}}"}'
              tagName: ion-icon
              ↓Style [ngx.components.UIStyle-1668517990923]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	color: rgb(25, 97, 153)
                        '
              ↓Popover [ngx.components.UIDynamicElement-1669373387322]: 
                beanData: |
                  '{
                   "ionBean": "InlinePopover",
                   "Trigger": "script:''datePicker'' + this.instanceID",
                   "TriggerAction": "plain:click"
                  }'
                tagName: ion-popover
                ↓DateTime [ngx.components.UIDynamicElement-1669373583947]: 
                  beanData: |
                    '{
                     "ionBean": "DateTime",
                     "ControlName": "plain:name1669373583947",
                     "CancelText": "plain:Annuler",
                     "DoneText": "plain:Choisir",
                     "Presentation": "plain:date",
                     "ShowDefaultButtons": "plain:true"
                    }'
                  tagName: ion-datetime
                  ↓Attr [ngx.components.UIAttribute-1669373857148]: 
                    attrName: '[multiple]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:true
                  ↓Event [ngx.components.UIControlEvent-1669374042452]: 
                    attrName: (ionChange)
                    eventName: ionChange
                    ↓computeDateAndCallSequence [ngx.components.UICustomAction-1669374136817]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                              		console.log(event)
                              		console.log(this.date)
                              		console.log(vars.sequenceParams)
                              		
                              		var sequenceToCall = vars.sequenceToCall;
                              		var sequenceParams = vars.sequenceParams;
                              		//debugger;
                              		
                              		if(event.detail.value.length > 2) {
                              			event.detail.value.splice(0, 1)
                              		}
                              		// if(sequenceParams.date_start != undefined) {
                              			
                              			// compare timestamps to be sure to send dates in correct order
                              			// var firstTs = new Date(this.date[0]).getTime();
                              			// var secTs = new Date(this.date[1]).getTime();
                              			
                              			var firstTs = new Date(event.detail.value[0]).getTime();
                              			var secTs = new Date(event.detail.value[1]).getTime();
                              			
                              			if(secTs < firstTs) {
                              				// sequenceParams.date_start = this.date[1]
                              				// sequenceParams.date_end = this.date[0]
                              				sequenceParams.date_start = event.detail.value[1]
                              				sequenceParams.date_end = event.detail.value[0]
                              			} else {
                              				// sequenceParams.date_start = this.date[0]
                              				// sequenceParams.date_end = this.date[1]
                              				sequenceParams.date_start = event.detail.value[0]
                              				sequenceParams.date_end = event.detail.value[1]
                              			}
                              			
                              			if(sequenceParams.date_start.includes(''T'')) {
                              				sequenceParams.date_start = sequenceParams.date_start.split(''T'')[0]
                              			}
                              			if(sequenceParams.date_end.includes(''T'')) {
                              				sequenceParams.date_end = sequenceParams.date_end.split(''T'')[0]
                              			}
                              			console.log(firstTs)
                              			console.log(secTs)
                              			// vars.sequenceParams.date_start 
                              			console.log(sequenceParams)
                              			//debugger;
                              		// }
                              		
                              		if(this.global[''linkDates''] == true) {
                              			console.log("linkDates true")
                              			// this.global[''date_start''] = sequenceParams.date_start;
                              			// this.global[''date_end''] = sequenceParams.date_end;
                              			// this.global[''sequenceParams''][''date_start''] = sequenceParams.date_start;
                              			// this.global[''sequenceParams''][''date_end''] = sequenceParams.date_end;
                              			this.global[''sequenceParams''] = {
                              				date_start: sequenceParams.date_start,
                              				date_end: sequenceParams.date_end,
                              				sites: sequenceParams.sites,
                              				agg_function: page.selectAggregation,
                              				label: '''',
                              				synthese: sequenceParams.synthese
                              			}
                              			console.log(this.global[''sequenceParams'']) 
                              			console.log(page)
                              		} else {
                              			sequenceParams = {
                              				date_start: sequenceParams.date_start,
                              				date_end: sequenceParams.date_end,
                              				sites: sequenceParams.sites,
                              				agg_function: page.selectAggregation,
                              				label: '''',
                              				synthese: sequenceParams.synthese
                              			}
                              			this.call(sequenceToCall, sequenceParams, null, 500, false).then( (resp) => {
                              		 		page.local[''response''] = resp
                              			})
                              			
                              		}
                              
                              		resolve();
                              '
                      ↓sequenceToCall [ngx.components.UIControlVariable-1669374444544]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.sequenceToCall","prefix":"","suffix":"","custom":"","useCustom":false}}
                      ↓sequenceParams [ngx.components.UIControlVariable-1669374455402]: 
                        varValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.sequenceParams","prefix":"","suffix":"","custom":"","useCustom":false}}
                      ↓ClosePopover [ngx.components.UIDynamicAction-1669383658652]: 
                        beanData: '{"ionBean":"ClosePopoverAction"}'
                  ↓Attr1 [ngx.components.UIAttribute-1669374198767]: 
                    attrName: '[(ngModel)]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.date
                    isEnabled: false
            ↓Attr [ngx.components.UIAttribute-1669373481242]: 
              attrName: id
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'datePicker' + this.instanceID
            ↓Style [ngx.components.UIStyle-1669385032612]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--background	//Background of the button
                      //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                      //--background-activated-opacity	//Opacity of the button when pressed
                      //--background-focused	//Background of the button when focused with the tab key
                      //--background-focused-opacity	//Opacity of the button when focused with the tab key
                      //--background-hover	//Background of the button on hover
                      //--background-hover-opacity	//Opacity of the background on hover
                      //--border-color	//Border color of the button
                      //--border-radius	//Border radius of the button
                      //--border-style	//Border style of the button
                      //--border-width	//Border width of the button
                      //--box-shadow	//Box shadow of the button
                      //--color	//Text color of the button
                      //--color-activated	//Text color of the button when pressed
                      //--color-focused	//Text color of the button when focused with the tab key
                      //--color-hover	//Text color of the button when hover
                      //--opacity	//Opacity of the button
                      //--padding-bottom	//Bottom padding of the button
                      //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                      //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                      //--padding-top	//Top padding of the button
                      //--ripple-color	//Color of the button ripple effect
                      //--transition	//Transition of the button
                      --background: none;
                      --background-activated: none;
                      --background-hover: none;
                      --background-hover-opacity: none;
                      --border-color: none;
                      --box-shadow: none;
                      '
          ↓Text [ngx.components.UIText-1667816527125]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local['response']?.date
      ↓Directive [ngx.components.UIControlDirective-1673882736885]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.aggregation == 'true'
        ↓GridCol [ngx.components.UIDynamicElement-1673882754670]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
          ↓SelectContainer [ngx.components.UIDynamicElement-1673882784724]: 
            beanData: |
              '{
               "ionBean": "Select",
               "ControlName": "plain:name1673882784724",
               "Interface": "plain:popover"
              }'
            tagName: ion-select
            ↓selectWeek [ngx.components.UIDynamicElement-1673882787951]: 
              beanData: '{"ionBean":"SelectOption","Value":"plain:week"}'
              tagName: ion-select-option
              ↓Text [ngx.components.UIText-1673882804566]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Agrégation par semaine
            ↓selectMonth [ngx.components.UIDynamicElement-1673882926780]: 
              beanData: '{"ionBean":"SelectOption","Value":"plain:month"}'
              tagName: ion-select-option
              ↓Text [ngx.components.UIText-1673882926783]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Agrégation par mois
            ↓selectYear [ngx.components.UIDynamicElement-1673882928098]: 
              beanData: '{"ionBean":"SelectOption","Value":"plain:year"}'
              tagName: ion-select-option
              ↓Text [ngx.components.UIText-1673882928101]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Agrégation par année
            ↓Attr [ngx.components.UIAttribute-1673883157812]: 
              attrName: '[(ngModel)]'
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.selectAggregation
            ↓Event [ngx.components.UIControlEvent-1673883266961]: 
              attrName: (ionChange)
              eventName: ionChange
              ↓updateParams [ngx.components.UICustomAction-1673883310521]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                        		console.log("update params")
                        		var synthese = page[''sequenceParams''][''synthese''];
                        		var sites = JSON.parse(page[''sequenceParams''][''sites'']);
                        		console.log("synth")
                        		console.log(synthese)
                        		console.log("sites")
                        		console.log(sites)
                        		/* page[''sequenceParams''] = {
                        			date_start: ''2021-01-01'',
                        			date_end: ''2022-12-01'',
                        			sites: sites,
                        			agg_function: page.selectAggregation,
                        			label: '''',
                        			synthese: synthese
                        		} */
                        		
                        		var sequenceParams = {
                        			date_start: ''2021-01-01'',
                        			date_end: ''2022-12-01'',
                        			sites: JSON.stringify(sites),
                        			agg_function: page.selectAggregation,
                        			label: '''',
                        			synthese: synthese, 
                        			limit: 20
                        		}
                        		this.showSpinner = "true"
                        		this.call(page.sequenceToCall, sequenceParams, null, 500, true).then( (resp) => {
                        			page.local[''response''] = resp
                        			this.showSpinner = "false"
                        		})
                        		// console.log("sequenceParams update")
                        		// console.log(page[''sequenceParams''])
                        		resolve();
                        '
              ↓IfElse [ngx.components.UIDynamicIf-1673883310518]: 
                beanData: '{"ionBean":"IfElseAction","condition":"script:this.local[''sitesToCall''].length != 0"}'
                isEnabled: false
                ↓Else_Handler [ngx.components.UIActionElseEvent-1673883310524]: 
                  ↓Toast [ngx.components.UIDynamicAction-1673883310527]: 
                    beanData: |
                      '{
                       "ionBean": "ToastAction",
                       "message": "plain:Veuillez sélectionner au moins un groupe",
                       "position": "plain:top"
                      }'
  ↓Directive [ngx.components.UIControlDirective-1668518041273]: 
    directiveExpression: this.local['response']?.total != undefined && this.local['response']?.total.length > 0  && this.displayTotalOnly == 'false'
    directiveName: If
    ↓rowTotal [ngx.components.UIDynamicElement-1668518082493]: 
      beanData: '{"ionBean":"GridRow","Height":"plain"}'
      tagName: ion-row
      ↓GridCol [ngx.components.UIDynamicElement-1668518082495]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Label [ngx.components.UIDynamicElement-1668518082497]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1668518082499]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Total
      ↓GridCol1 [ngx.components.UIDynamicElement-1668518082501]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Label [ngx.components.UIDynamicElement-1668518082503]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1668518082505]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local['response']?.total + ' MWh'
  ↓Style [ngx.components.UIStyle-1668517919878]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '/**
             * Custom properties (sometimes referred to as CSS variables or cascading variables)
             * are entities defined by CSS authors that contain specific values to be reused throughout a document.
             * They are set using custom property notation, e.g.: --main-color: black;
             * and are accessed using the var() function, e.g.: color: var(--main-color);
             * You can find below your component''s properties you can customize within the page.
             * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
             * For more informations see https://ionicframework.com/docs/theming.
            **/
            //--ion-grid-padding	//Padding for the Grid
            //--ion-grid-padding-lg	//Padding for the Grid on lg screens
            //--ion-grid-padding-md	//Padding for the Grid on md screens
            //--ion-grid-padding-sm	//Padding for the Grid on sm screens
            //--ion-grid-padding-xl	//Padding for the Grid on xl screens
            //--ion-grid-padding-xs	//Padding for the Grid on xs screens
            //--ion-grid-width	//Width of the fixed Grid
            //--ion-grid-width-lg	//Width of the fixed Grid on lg screens
            //--ion-grid-width-md	//Width of the fixed Grid on md screens
            //--ion-grid-width-sm	//Width of the fixed Grid on sm screens
            //--ion-grid-width-xl	//Width of the fixed Grid on xl screens
            //--ion-grid-width-xs	//Width of the fixed Grid on xs screens
            background-color: #fff;
            max-height: 100% !important;
            '
  ↓Directive2 [ngx.components.UIControlDirective-1669045451994]: 
    directiveExpression: this.isGoogleMap == "false" && this.isGauge == "false" && this.isHeatmap == "false"
    directiveName: If
    ↓rowChart [ngx.components.UIDynamicElement-1667816769428]: 
      beanData: '{"ionBean":"GridRow","Height":"plain"}'
      tagName: ion-row
      ↓colChart [ngx.components.UIDynamicElement-1667816769430]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Div1 [ngx.components.UIDynamicElement-1669372277523]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓Div [ngx.components.UIDynamicElement-1669370544072]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Chart [ngx.components.UIDynamicElement-1667816799531]: 
              beanData: |
                '{
                 "ionBean": "Charts",
                 "data": "script:(this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.data != undefined) ? this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.data : {}",
                 "datasets": "plain",
                 "labels": "script:(this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.labels != undefined) ? this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.labels: []",
                 "Options": "script:(this.pageOwner.listen([String(this.sequenceToCall + ''#'' + this.sequenceMarker)])?.chartOptions != undefined) ? this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.chartOptions : {}",
                 "ChartType": "script:(this.pageOwner.listen([String(this.sequenceToCall + ''#'' + this.sequenceMarker)])?.chartType != undefined) ? this.pageOwner.listen([String(this.sequenceToCall  + ''#'' + this.sequenceMarker)])?.chartType : ''''"
                }'
              isEnabled: false
              tagName: canvas
            ↓Style [ngx.components.UIStyle-1669370552961]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	position: relative;
                      	height: auto;
                      	width: 100%;
                      	min-height: 300px;
                      	max-height: 100%;
                      '
            ↓Directive [ngx.components.UIControlDirective-1674133916532]: 
              directiveExpression: this.showSpinner == 'true' else elseBlock
              directiveName: If
              ↓Div [ngx.components.UIDynamicElement-1674232846976]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Spinner [ngx.components.UIDynamicElement-1674133971273]: 
                  beanData: '{"ionBean":"Spinner"}'
                  tagName: ion-spinner
                ↓Style [ngx.components.UIStyle-1674232861517]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	text-align: center;
                          '
            ↓Div [ngx.components.UIDynamicElement-1674133992348]: 
              beanData: '{"ionBean":"DivTag"}'
              identifier: elseBlock
              isEnabled: false
              tagName: div
            ↓Tag [ngx.components.UIElement-1674230377720]: 
              identifier: elseBlock
              tagName: ng-template
              ↓Directive [ngx.components.UIControlDirective-1674554917357]: 
                directiveExpression: this.displayTotalOnly == 'true' else chartBlock
                directiveName: If
                ↓TextItem [ngx.components.UIDynamicElement-1674555801682]: 
                  beanData: '{"ionBean":"TextItem"}'
                  tagName: ion-text
                  ↓Text1 [ngx.components.UIText-1674554996286]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this.local['response']?.total
                  ↓Style [ngx.components.UIStyle-1674555845370]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	font-size: 35px;
                            	color: rgb(64, 165, 167)
                            '
                ↓TextItem1 [ngx.components.UIDynamicElement-1674555810172]: 
                  beanData: '{"ionBean":"TextItem"}'
                  tagName: ion-text
                  ↓Text [ngx.components.UIText-1674555810174]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:MWh
              ↓Tag [ngx.components.UIElement-1674554968876]: 
                identifier: chartBlock
                tagName: ng-template
                ↓Directive [ngx.components.UIControlDirective-1675163198318]: 
                  directiveExpression: this.local['response']?.error != undefined else chart
                  directiveName: If
                  ↓TextItem [ngx.components.UIDynamicElement-1675163247706]: 
                    beanData: '{"ionBean":"TextItem"}'
                    tagName: ion-text
                    ↓Text [ngx.components.UIText-1675163247708]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.local['response']?.error?.message
                ↓Tag [ngx.components.UIElement-1675163304756]: 
                  identifier: chart
                  tagName: ng-template
                  ↓Chart1 [ngx.components.UIDynamicElement-1673605849683]: 
                    beanData: |
                      '{
                       "ionBean": "Charts",
                       "data": "script:(this.local[''response'']?.data != undefined) ? this.local[''response'']?.data : {}",
                       "datasets": "plain",
                       "labels": "script:(this.local[''response'']?.labels != undefined) ? this.local[''response'']?.label : []",
                       "Options": "script:(this.local[''response'']?.chartOptions != undefined) ? this.local[''response'']?.chartOptions : {}",
                       "ChartType": "script:(this.local[''response'']?.chartType != undefined) ? this.local[''response'']?.chartType : ''''"
                      }'
                    tagName: canvas
          ↓Style [ngx.components.UIStyle-1669372291655]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	height: 100%;
                    '
      ↓Style [ngx.components.UIStyle-1669370029068]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '/**
                 * Custom properties (sometimes referred to as CSS variables or cascading variables)
                 * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                 * They are set using custom property notation, e.g.: --main-color: black;
                 * and are accessed using the var() function, e.g.: color: var(--main-color);
                 * You can find below your component''s properties you can customize within the page.
                 * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                 * For more informations see https://ionicframework.com/docs/theming.
                **/
                //--ion-grid-column-padding	//Padding for the Column
                //--ion-grid-column-padding-lg	//Padding for the Column on lg screens and up
                //--ion-grid-column-padding-md	//Padding for the Column on md screens and up
                //--ion-grid-column-padding-sm	//Padding for the Column on sm screens and up
                //--ion-grid-column-padding-xl	//Padding for the Column on xl screens and up
                //--ion-grid-column-padding-xs	//Padding for the Column on xs screens and up
                //--ion-grid-columns	//The number of total Columns in the Grid
                
                max-height: 100% !important;
                '
  ↓Directive3 [ngx.components.UIControlDirective-1669045553494]: 
    directiveExpression: this.isGoogleMap == "true"
    directiveName: If
    ↓rowGoogleMaps [ngx.components.UIDynamicElement-1669048244161]: 
      beanData: '{"ionBean":"GridRow"}'
      tagName: ion-row
      ↓colGoogleMaps [ngx.components.UIDynamicElement-1669048244163]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Div [ngx.components.UIDynamicElement-1676393472501]: 
          beanData: '{"ionBean":"DivTag"}'
          tagName: div
          ↓GoogleMap [ngx.components.UIDynamicElement-1669045580544]: 
            beanData: '{"ionBean":"GoogleMap","Zoom":"script:5"}'
            tagName: agm-map
            ↓Directive [ngx.components.UIControlDirective-1669045679734]: 
              directiveItemName: marker
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:(this.local[''response'']?.markers != undefined && this.local[''response'']?.markers.length > 0) ? this.local[''response'']?.markers : [] '
              ↓MapMarker [ngx.components.UIDynamicElement-1669045580548]: 
                beanData: |
                  '{
                   "ionBean": "MapMarker",
                   "Latitude": "script:marker.latitude",
                   "Longitude": "script:marker.longitude",
                   "Title": "script:marker.nom"
                  }'
                tagName: agm-marker
                ↓Fragment [ngx.components.UICustom-1669197702998]: 
                  htmlTemplate: |
                    '<agm-info-window [disableAutoPan]="true">
                      <p><strong>{{ marker.nom }}</strong></p>
                      <p style="color: blue; text-decoration: underline; cursor: pointer" onClick="page.routerProvider.setRoot(''Monosite'', {}, null)">Voir le détail</p>
                    </agm-info-window>'
                  isEnabled: false
                ↓MapInfoWindow [ngx.components.UIDynamicElement-1669386848616]: 
                  beanData: '{"ionBean":"MapInfoWindow"}'
                  tagName: agm-info-window
                  ↓Label [ngx.components.UIDynamicElement-1669386896266]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1669386896268]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:marker.nom
                  ↓Tag [ngx.components.UIElement-1669387004482]: 
                    selfClose: true
                    tagName: br
                  ↓Button [ngx.components.UIDynamicElement-1669386923161]: 
                    beanData: '{"ionBean":"Button"}'
                    tagName: ion-button
                    ↓Label [ngx.components.UIDynamicElement-1669386923163]: 
                      beanData: '{"ionBean":"Label"}'
                      tagName: ion-label
                      ↓Text [ngx.components.UIText-1669386923165]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:Voir
                    ↓Event [ngx.components.UIControlEvent-1669386923167]: 
                      ↓RootPage [ngx.components.UIDynamicAction-1669386933031]: 
                        beanData: |
                          '{
                           "ionBean": "RootPageAction",
                           "page": "plain:poc_energisme.Application.NgxApp.Monosite",
                           "data": "script:{ site_id: marker.site_id }"
                          }'
          ↓Style [ngx.components.UIStyle-1676393518387]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	height: 85%;
                    '
  ↓Directive4 [ngx.components.UIControlDirective-1669283939146]: 
    directiveExpression: this.isGoogleMap == "false" && this.isGauge == "true"
    directiveName: If
    ↓rowGaugeChart [ngx.components.UIDynamicElement-1669283965383]: 
      beanData: '{"ionBean":"GridRow","Height":"plain"}'
      tagName: ion-row
      ↓colGaugeChart [ngx.components.UIDynamicElement-1669283965385]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "Size": "plain:6",
           "SizeSm": "plain:12",
           "SizeXs": "plain:12"
          }'
        tagName: ion-col
        ↓Directive [ngx.components.UIControlDirective-1674233723647]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.showSpinner == 'true' else elseBlock
          ↓Spinner [ngx.components.UIDynamicElement-1674233772026]: 
            beanData: '{"ionBean":"Spinner"}'
            tagName: ion-spinner
        ↓Tag [ngx.components.UIElement-1674233783192]: 
          identifier: elseBlock
          tagName: ng-template
          ↓Directive1 [ngx.components.UIControlDirective-1676539401349]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local['response'] != undefined
            ↓UseSharedComponent [ngx.components.UIUseShared-1669299066340]: 
              sharedcomponent: poc_energisme.Application.NgxApp.gauge_chart
              ↓canvasWidth [ngx.components.UIUseVariable-1669299066343]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:250
              ↓needleValue [ngx.components.UIUseVariable-1669299066346]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:(this.local[''response'']?.needleValue != undefined) ? this.local[''response'']?.needleValue : '''''
              ↓centralLabel [ngx.components.UIUseVariable-1669299066349]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓options [ngx.components.UIUseVariable-1669299066352]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:(this.local[''response'']?.options != undefined) ? this.local[''response'']?.options : {}'
              ↓name [ngx.components.UIUseVariable-1669299066355]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓bottomLabel [ngx.components.UIUseVariable-1669299066358]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:(this.local[''response'']?.bottomLabel != undefined) ? this.local[''response'']?.bottomLabel : '''''
          ↓Directive [ngx.components.UIControlDirective-1676537552097]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.local['local']?.response != undefined
            isEnabled: false
      ↓colInfos [ngx.components.UIDynamicElement-1669285145558]: 
        beanData: |
          '{
           "ionBean": "GridCol",
           "Size": "plain:12",
           "SizeSm": "plain:12",
           "SizeXs": "plain:12"
          }'
        tagName: ion-col
        ↓Grid [ngx.components.UIDynamicElement-1669285227328]: 
          beanData: '{"ionBean":"Grid"}'
          tagName: ion-grid
          ↓rowPeriodeActuelle [ngx.components.UIDynamicElement-1669285227330]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            tagName: ion-row
            ↓colLabel [ngx.components.UIDynamicElement-1669285227332]: 
              beanData: '{"ionBean":"GridCol","FlexAlignement":"plain:ion-align-self-end"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285227334]: 
                beanData: '{"ionBean":"Label"}'
                isEnabled: false
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285227336]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:(this.local[''response'']?.secondPeriodToDisplay != undefined) ? ''Période actuelle ('' + this.local[''response'']?.secondPeriodToDisplay + '') : '''''
              ↓TextItem [ngx.components.UIDynamicElement-1675422699737]: 
                beanData: '{"ionBean":"TextItem"}'
                tagName: ion-text
                ↓Text [ngx.components.UIText-1675422699739]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:(this.local[''response'']?.secondPeriodToDisplay != undefined) ? ''Période actuelle ('' + this.local[''response'']?.secondPeriodToDisplay + '')'' : '''''
          ↓rowValuePeriodeActuelle [ngx.components.UIDynamicElement-1669285273781]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            tagName: ion-row
            ↓colValuePeriodeActuelle [ngx.components.UIDynamicElement-1669285273783]: 
              beanData: '{"ionBean":"GridCol"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285273785]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285273787]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:(this.local[''response'']?.currentTotal != undefined) ? this.local[''response'']?.currentTotal + '' MWh'' : '''''
                ↓Attr [ngx.components.UIAttribute-1673877219962]: 
                  attrName: class
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:bold
          ↓rowMWh [ngx.components.UIDynamicElement-1669285742415]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            isEnabled: false
            tagName: ion-row
            ↓colMWh [ngx.components.UIDynamicElement-1669285742417]: 
              beanData: '{"ionBean":"GridCol"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285742419]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285742421]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:MWh
          ↓rowPeriodePrecedente [ngx.components.UIDynamicElement-1669285833480]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            tagName: ion-row
            ↓colLabel [ngx.components.UIDynamicElement-1669285833483]: 
              beanData: '{"ionBean":"GridCol"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285833486]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285833489]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:(this.local[''response'']?.firstPeriodToDisplay != undefined) ? ''Période précédente ('' + this.local[''response'']?.firstPeriodToDisplay + '')'' : '''''
          ↓rowValuePeriodePrecedente [ngx.components.UIDynamicElement-1669285833492]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            tagName: ion-row
            ↓colValuePeriodePrecedente [ngx.components.UIDynamicElement-1669285833495]: 
              beanData: '{"ionBean":"GridCol"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285833498]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285833501]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:(this.local[''response'']?.lastTotal != undefined) ? this.local[''response'']?.lastTotal + '' MWh'' : '''''
                ↓Attr [ngx.components.UIAttribute-1673877258951]: 
                  attrName: class
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:bold
          ↓rowMWh1 [ngx.components.UIDynamicElement-1669285833504]: 
            beanData: '{"ionBean":"GridRow","Height":"plain"}'
            isEnabled: false
            tagName: ion-row
            ↓colMWh [ngx.components.UIDynamicElement-1669285833507]: 
              beanData: '{"ionBean":"GridCol"}'
              tagName: ion-col
              ↓Label [ngx.components.UIDynamicElement-1669285833510]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1669285833513]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:MWh
        ↓Style [ngx.components.UIStyle-1669286035579]: 
          isEnabled: false
          styleContent: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '/**
                   * Custom properties (sometimes referred to as CSS variables or cascading variables)
                   * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                   * They are set using custom property notation, e.g.: --main-color: black;
                   * and are accessed using the var() function, e.g.: color: var(--main-color);
                   * You can find below your component''s properties you can customize within the page.
                   * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                   * For more informations see https://ionicframework.com/docs/theming.
                  **/
                  //--ion-grid-column-padding	//Padding for the Column
                  //--ion-grid-column-padding-lg	//Padding for the Column on lg screens and up
                  //--ion-grid-column-padding-md	//Padding for the Column on md screens and up
                  //--ion-grid-column-padding-sm	//Padding for the Column on sm screens and up
                  //--ion-grid-column-padding-xl	//Padding for the Column on xl screens and up
                  //--ion-grid-column-padding-xs	//Padding for the Column on xs screens and up
                  //--ion-grid-columns	//The number of total Columns in the Grid
                  text-align: right;
                  '
  ↓Directive5 [ngx.components.UIControlDirective-1669388895762]: 
    directiveExpression: this.isHeatmap == "true"
    directiveName: If
    ↓rowHeatmap [ngx.components.UIDynamicElement-1669388938583]: 
      beanData: '{"ionBean":"GridRow","Height":"plain"}'
      tagName: ion-row
      ↓colHeatmap [ngx.components.UIDynamicElement-1669388938585]: 
        beanData: '{"ionBean":"GridCol"}'
        tagName: ion-col
        ↓Text [ngx.components.UIText-1669390087394]: 
          isEnabled: false
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:JSON.parse(this.pageOwner.listen([String(this.sequenceToCall)])?.series)
        ↓Directive [ngx.components.UIControlDirective-1675163372597]: 
          directiveExpression: this.showSpinner == 'true' else elseBlock
          directiveName: If
          ↓Div [ngx.components.UIDynamicElement-1675163411788]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Spinner [ngx.components.UIDynamicElement-1675163411791]: 
              beanData: '{"ionBean":"Spinner"}'
              tagName: ion-spinner
            ↓Style [ngx.components.UIStyle-1675163411794]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	text-align: center;
                      '
        ↓Tag [ngx.components.UIElement-1675163421439]: 
          identifier: elseBlock
          tagName: ng-template
          ↓Directive [ngx.components.UIControlDirective-1675169927519]: 
            directiveExpression: this.local['response']?.error != undefined else heatmapBlock
            directiveName: If
            ↓TextItem [ngx.components.UIDynamicElement-1675169927522]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1675169927525]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local['response']?.error?.message
          ↓Tag [ngx.components.UIElement-1675169950893]: 
            identifier: heatmapBlock
            tagName: ng-template
            ↓UseSharedComponent [ngx.components.UIUseShared-1669388969270]: 
              sharedcomponent: poc_energisme.Application.NgxApp.heatmap
              ↓annotations [ngx.components.UIUseVariable-1669389080677]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓chart [ngx.components.UIUseVariable-1669389080679]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: |
                        'script:{
                                  height: ''600px'',
                                  type: ''heatmap''
                         }'
              ↓colors [ngx.components.UIUseVariable-1669389080681]: 
                comment: Array of hexadecimal string
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓dataLabels [ngx.components.UIUseVariable-1669389080683]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:{ enabled: false }'
              ↓fill [ngx.components.UIUseVariable-1669389080685]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓grid [ngx.components.UIUseVariable-1669389080687]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓labels [ngx.components.UIUseVariable-1669389080689]: 
                comment: Array of strings
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓legend [ngx.components.UIUseVariable-1669389080691]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓plotOptions [ngx.components.UIUseVariable-1669389080693]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local['response']?.plotOptions
              ↓responsive [ngx.components.UIUseVariable-1669389080695]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓series [ngx.components.UIUseVariable-1669389080697]: 
                comment: Array of objects
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local['response']?.series
              ↓states [ngx.components.UIUseVariable-1669389080699]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓stroke [ngx.components.UIUseVariable-1669389080701]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓subtitle [ngx.components.UIUseVariable-1669389080703]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓theme [ngx.components.UIUseVariable-1669389080705]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓title [ngx.components.UIUseVariable-1669389080707]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: |
                        'script:{
                                  text: ''HeatMap Chart with Color Range Sample''
                                }'
              ↓tooltip [ngx.components.UIUseVariable-1669389080709]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
              ↓xaxis [ngx.components.UIUseVariable-1669389080711]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.local['response']?.xaxis
              ↓yaxis [ngx.components.UIUseVariable-1669389080713]: 
                comment: Object
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:''
↓title [ngx.components.UICompVariable-1667815971456]: 
  comment: Widget title (string)
↓sequenceToCall [ngx.components.UICompVariable-1668519653965]: 
  comment: 'Name of the sequence to call. If the sequence to call is in the same project then : ".mySequenceToCall" (do not forget the ".") if it''s in another project then : "myProjectName.mySequenceToCall" '
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1668519671952]: 
  ↓callSequence [ngx.components.UICustomAction-1668519697892]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
            		var sequenceToCall = vars.sequenceToCall;
            		var sequenceParams = vars.sequenceParams;
            		var sequenceMarker = vars.sequenceMarker;
            		
            		sequenceToCall = sequenceToCall + "#" + sequenceMarker;
            		if(sequenceToCall != undefined && sequenceToCall.length > 0) {
            					this.call(sequenceToCall, sequenceParams, null, 500, true).then( (resp) => {
            						page.local[''response''] = resp
            					})
            			resolve();
            		} else {
            			resolve();
            		}
            '
    isEnabled: false
    ↓sequenceToCall [ngx.components.UIControlVariable-1668520342218]: 
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.sequenceToCall","prefix":"","suffix":"","custom":"","useCustom":false}}
    ↓sequenceParams [ngx.components.UIControlVariable-1668612687661]: 
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.sequenceParams","prefix":"","suffix":"","custom":"","useCustom":false}}
    ↓sequenceMarker [ngx.components.UIControlVariable-1673517375949]: 
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: source:{"filter":"Shared","project":"poc_energisme","input":"","model":{"data":[{"priority":1667815060213,"regular":true}],"path":"?.sequenceMarker","prefix":"","suffix":"","custom":"","useCustom":false}}
↓sequenceParams [ngx.components.UICompVariable-1668612583513]: 
  comment: 'Params of the sequence to call (object) ex: { myFirstParam: ''myValue'', mySecondParam: ''myValue'' }'
↓isGoogleMap [ngx.components.UICompVariable-1669045379585]: 
  comment: To determine if widget is a map widget. true or false (string)
↓isGauge [ngx.components.UICompVariable-1669283892917]: 
  comment: To determine if widget is a gauge widget. true or false (string)
↓isInModal [ngx.components.UICompVariable-1669295637365]: 
  comment: To determine if widget is zoomed. true or false (string)
↓isHeatmap [ngx.components.UICompVariable-1669388784767]: 
  comment: To determine if widget is a heatmap widget. true or false (string)
↓sequenceMarker [ngx.components.UICompVariable-1673517282405]: 
↓aggregation [ngx.components.UICompVariable-1673882707110]: 
↓displayTotalOnly [ngx.components.UICompVariable-1674554877702]: 